# tasks file for centos7-host-preparation
---

- name: "Check required variables"
  fail: msg="Variable '{{ item }}' is not defined"
  when: item not in vars
  with_items: "{{ required_vars }}"

# update system
- name: Ensure we have the latest version of every package
  tags:
  - skip_ansible_lint
  package:
    name: '*'
    state: latest

# configure software repositories
- name: Ensure EPEL is present
  package:
    name: epel-release
    state: present

- name: Ensure copr repo for OpenSCAP is enabled
  yum_repository:
    name: copr-openscap
    description: OpenSCAP lastest copr
    baseurl: >-
     https://copr-be.cloud.fedoraproject.org/results/openscapmaint/openscap-latest/epel-7-$basearch/
    gpgkey: >-
     https://copr-be.cloud.fedoraproject.org/results/openscapmaint/openscap-latest/pubkey.gpg
    gpgcheck: "yes"
    repo_gpgcheck: "no"
    skip_if_unavailable: "yes"
    enabled: "yes"

- name: Ensure copr repo for cockpit-preview is enabled
  yum_repository:
    name: copr-cockpit-preview
    description: Copr repo for cockpit-preview owned by @cockpit
    baseurl: >-
     https://copr-be.cloud.fedoraproject.org/results/@cockpit/cockpit-preview/epel-7-$basearch/
    gpgkey: >-
     https://copr-be.cloud.fedoraproject.org/results/@cockpit/cockpit-preview/pubkey.gpg
    gpgcheck: "yes"
    repo_gpgcheck: "no"
    skip_if_unavailable: "yes"
    enabled: "yes"

# eventually update system with the new repositories configured

- name: Ensure we have the latest version of every package
  tags:
    - skip_ansible_lint
  package:
    name: '*'
    state: latest

# install base packages
- name: Install base packages (defined in vars/main.yml)
  package:
    name: "{{ base_packages }}"
    state: present

# check basic system configurations

- name: Check if running inside a docker container
  stat:
    path: /.dockerenv
  register: dockerenv_file_var

- name: Ensure SELinux is enabled
  selinux:
    policy: targeted
    state: enforcing
  when: not dockerenv_file_var.stat.exists

- name: Ensure the timezone is set to UTC
  file:
    src: /usr/share/zoneinfo/GMT
    dest: /etc/localtime
    state: link

- name: Ensure FirewallD is started and enabled
  systemd:
    name: firewalld
    state: started
    enabled: "True"

- name: Ensure SSH can pass the firewall
  firewalld:
    service: ssh
    state: enabled
    permanent: "True"
    immediate: "True"
    zone: public

- name: Ensure Cockpit can pass the firewall
  firewalld:
    service: cockpit
    state: enabled
    permanent: "True"
    immediate: "True"
    zone: public

- name: Ensure the sshd service is started and enabled
  service:
    name: sshd
    state: started
    enabled: "True"

- name: Ensure the NTP service is started and enabled
  service:
    name: ntpd
    state: started
    enabled: "True"

- name: Ensure cron(ie) is started and enabled
  service:
    name: crond
    state: started
    enabled: "True"

- name: Ensure cockpit socket is started and enabled
  service:
    name: cockpit.socket
    state: started
    enabled: "True"

- name: Ensure Performance Co-Pilot daemon is started and enabled
  service:
    name: pmcd
    state: started
    enabled: "True"

- name: Ensure pmie is started and enabled
  service:
    name: pmie
    state: started
    enabled: "True"

- name: Ensure pmlogger is started and enabled
  service:
    name: pmlogger
    state: started
    enabled: "True"

# configure automatic security updates

- name: Configure yum-cron.conf
  template:
    src: yum-cron.conf.jinja2
    dest: /etc/yum/yum-cron.conf
  tags: yum-cron

- name: Configure yum-cron-hourly.conf
  template:
    src: yum-cron-hourly.conf.jinja2
    dest: /etc/yum/yum-cron-hourly.conf
  tags: yum-cron

- name: Ensure yum-cron service is running and enabled
  service:
    name: yum-cron
    state: started
    enabled: "yes"
  tags: yum-cron

- name: Configure yum-cron-clean to run a yum clean regularly
  template:
    src: yum-clean-cron.jinja2
    dest: /etc/cron.{{ yum_cron_clean_when }}/yum-clean-cron
    mode: 0755

- name: Ensure the MOTD file is present and updated
  template:
    src: motd.jinja2
    dest: /etc/motd
    owner: root
    group: root
    mode: 0644

- name: Ensure ordinary user is present
  user:
    name: ste
    shell: /bin/bash
    groups: wheel

# configure ordinary user with ssh key login only

# set authorized key for ordinary user
- name: Set authorized key took from url
  authorized_key:
    user: ste
    state: present
    key: https://github.com/StefanoAgazzi.keys

- name: Ensure the hostname is the same of the inventory
  hostname:
    name: "{{ inventory_hostname }}"
  when: not dockerenv_file_var.stat.exists
